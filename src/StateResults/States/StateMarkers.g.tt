<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#
    // Define the path for the CSV source file
    var csvFile = Path.Combine(Path.GetDirectoryName(Host.TemplateFile) ?? string.Empty, "StateMarkers.csv");

    // Read all lines from the CSV file, skip the header line
    var csvLines = File.ReadAllLines(csvFile).Skip(1); // Skip the header line
#>
/*
    This file was generated automatically, do not make changes to it manually!
*/
#nullable enable

// Use GuardClauses for null or white space check
#if !NET8_0_OR_GREATER
using Ardalis.GuardClauses;
#endif

using BMTLab.StateResults.Abstractions;

namespace Application.Models.StateResults.States;

/// <summary>
///     Contains a set of common states representing the result of an operation2.
/// </summary>
[PublicAPI]
[DebuggerStepThrough]
[ExcludeFromCodeCoverage]
public static class StateMarkers
{
<#
    // Process each line in the CSV file
    foreach (var line in csvLines)
    {
        if (string.IsNullOrWhiteSpace(line))
            continue;

        // Split the line by comma and trim the parts
        var parts = line.Split(',').Select(p => p.Trim()).ToArray();
        var name = parts[0];
        var type = parts[1];

        // Write a success or error record based on the type
        switch (type.ToUpperInvariant())
        {
            case "SUCCESS":
                WriteSuccessRecord(name);
                break;
            case "ERROR":
                WriteErrorRecord(name);
                break;
            default:
                throw new InvalidOperationException($"Unknown state type: {type}");
        }
    }
#>
}


<#+
    // Method for writing success records
    private void WriteSuccessRecord(string name)
    {
#>
    ///<inheritdoc cref="ISuccessStateMarker" />
    [PublicAPI]
    public readonly record struct <#= name #> : ISuccessStateMarker
    {
        /// <param name="message"><see cref="Message"/>.</param>
        /// <exception cref="ArgumentNullException">if the <paramref name="message"/> string is <c>null</c>.</exception>
        /// <exception cref="ArgumentException">if the <paramref name="message"/> string is empty or contains empty characters.</exception>
        public <#= name #>(string message) : this()
        {
            #if NET8_0_OR_GREATER
            ArgumentException.ThrowIfNullOrWhiteSpace(message);
            #else
            Guard.Against.NullOrWhiteSpace(message, nameof(message));
            #endif

            Message = message;
        }

        /// <inheritdoc />
        public string? Message { get; init; }
    }


<#+
    }

    // Method for writing error records
    private void WriteErrorRecord(string name)
    {
#>
    ///<inheritdoc cref="IErrorStateMarker" />
    [PublicAPI]
    public readonly record struct <#= name #> : IErrorStateMarker
    {
        /// <param name="message"><see cref="Message"/>.</param>
        /// <param name="exception"><see cref="Exception"/>.</param>
        /// <exception cref="ArgumentNullException">if the <paramref name="message"/> string is <c>null</c>.</exception>
        /// <exception cref="ArgumentException">if the <paramref name="message"/> string is empty or contains empty characters.</exception>
        public <#= name #>(string message, Exception? exception = default) : this()
        {
            #if NET8_0_OR_GREATER
            ArgumentException.ThrowIfNullOrWhiteSpace(message);
            #else
            Guard.Against.NullOrWhiteSpace(message, nameof(message));
            #endif

            Message = message;
            Exception = exception;
        }

        /// <inheritdoc />
        public string? Message { get; init; }

        /// <inheritdoc />
        public Exception? Exception { get; init; }
    }


<#+
    }
#>